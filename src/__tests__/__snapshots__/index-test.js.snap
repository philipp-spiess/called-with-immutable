// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`toBeCalledWith works with jasmine.createSpy and Immutable.js objects 1`] = `
"<dim>expect(<red>spy</><dim>).not.toBeCalledWith(<green>expected</><dim>)

Expected spy not to have been called with:
  <green>[Immutable.Map {foo: \\"bar\\"}, Immutable.Map {foo: \\"bar\\"}]</>"
`;

exports[`toBeCalledWith works with jasmine.createSpy and Immutable.js objects within regular objects 1`] = `
"<dim>expect(<red>spy</><dim>).not.toBeCalledWith(<green>expected</><dim>)

Expected spy not to have been called with:
  <green>[{\\"a\\": Immutable.Map {foo: \\"bar\\"}}, {\\"b\\": Immutable.Map {foo: \\"bar\\"}}]</>"
`;

exports[`toBeCalledWith works with jasmine.createSpy and more actual arguments 1`] = `
"<dim>expect(<red>spy</><dim>).toBeCalledWith(<green>expected</><dim>)

Expected spy to have been called with:
  <green>[\\"foo\\"]</>
But it was called with:
  <red>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toBeCalledWith works with jasmine.createSpy and more expected arguments 1`] = `
"<dim>expect(<red>spy</><dim>).toBeCalledWith(<green>expected</><dim>)

Expected spy to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was called with:
  <red>[\\"foo\\"]</>"
`;

exports[`toBeCalledWith works with jest.fn and Immutable.js objects 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toBeCalledWith(<green>expected</><dim>)

Expected mock function not to have been called with:
  <green>[Immutable.Map {foo: \\"bar\\"}, Immutable.Map {foo: \\"bar\\"}]</>"
`;

exports[`toBeCalledWith works with jest.fn and Immutable.js objects within regular objects 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toBeCalledWith(<green>expected</><dim>)

Expected mock function not to have been called with:
  <green>[{\\"a\\": Immutable.Map {foo: \\"bar\\"}}, {\\"b\\": Immutable.Map {foo: \\"bar\\"}}]</>"
`;

exports[`toBeCalledWith works with jest.fn and more actual arguments 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toBeCalledWith(<green>expected</><dim>)

Expected mock function to have been called with:
  <green>[\\"foo\\"]</>
But it was called with:
  <red>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toBeCalledWith works with jest.fn and more expected arguments 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toBeCalledWith(<green>expected</><dim>)

Expected mock function to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was called with:
  <red>[\\"foo\\"]</>"
`;

exports[`toBeCalledWithImmutable works with jasmine.createSpy and Immutable.js objects 1`] = `
"<dim>expect(<red>spy</><dim>).not.toBeCalledWithImmutable(<green>expected</><dim>)

Expected spy not to have been called with:
  <green>[Immutable.Map {foo: \\"bar\\"}, Immutable.Map {foo: \\"bar\\"}]</>"
`;

exports[`toBeCalledWithImmutable works with jasmine.createSpy and Immutable.js objects within regular objects 1`] = `
"<dim>expect(<red>spy</><dim>).not.toBeCalledWithImmutable(<green>expected</><dim>)

Expected spy not to have been called with:
  <green>[{\\"a\\": Immutable.Map {foo: \\"bar\\"}}, {\\"b\\": Immutable.Map {foo: \\"bar\\"}}]</>"
`;

exports[`toBeCalledWithImmutable works with jasmine.createSpy and more actual arguments 1`] = `
"<dim>expect(<red>spy</><dim>).toBeCalledWithImmutable(<green>expected</><dim>)

Expected spy to have been called with:
  <green>[\\"foo\\"]</>
But it was called with:
  <red>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toBeCalledWithImmutable works with jasmine.createSpy and more expected arguments 1`] = `
"<dim>expect(<red>spy</><dim>).toBeCalledWithImmutable(<green>expected</><dim>)

Expected spy to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was called with:
  <red>[\\"foo\\"]</>"
`;

exports[`toBeCalledWithImmutable works with jest.fn and Immutable.js objects 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toBeCalledWithImmutable(<green>expected</><dim>)

Expected mock function not to have been called with:
  <green>[Immutable.Map {foo: \\"bar\\"}, Immutable.Map {foo: \\"bar\\"}]</>"
`;

exports[`toBeCalledWithImmutable works with jest.fn and Immutable.js objects within regular objects 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toBeCalledWithImmutable(<green>expected</><dim>)

Expected mock function not to have been called with:
  <green>[{\\"a\\": Immutable.Map {foo: \\"bar\\"}}, {\\"b\\": Immutable.Map {foo: \\"bar\\"}}]</>"
`;

exports[`toBeCalledWithImmutable works with jest.fn and more actual arguments 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toBeCalledWithImmutable(<green>expected</><dim>)

Expected mock function to have been called with:
  <green>[\\"foo\\"]</>
But it was called with:
  <red>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toBeCalledWithImmutable works with jest.fn and more expected arguments 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toBeCalledWithImmutable(<green>expected</><dim>)

Expected mock function to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was called with:
  <red>[\\"foo\\"]</>"
`;

exports[`toHaveBeenCalledWith works with jasmine.createSpy and Immutable.js objects 1`] = `
"<dim>expect(<red>spy</><dim>).not.toHaveBeenCalledWith(<green>expected</><dim>)

Expected spy not to have been called with:
  <green>[Immutable.Map {foo: \\"bar\\"}, Immutable.Map {foo: \\"bar\\"}]</>"
`;

exports[`toHaveBeenCalledWith works with jasmine.createSpy and Immutable.js objects within regular objects 1`] = `
"<dim>expect(<red>spy</><dim>).not.toHaveBeenCalledWith(<green>expected</><dim>)

Expected spy not to have been called with:
  <green>[{\\"a\\": Immutable.Map {foo: \\"bar\\"}}, {\\"b\\": Immutable.Map {foo: \\"bar\\"}}]</>"
`;

exports[`toHaveBeenCalledWith works with jasmine.createSpy and more actual arguments 1`] = `
"<dim>expect(<red>spy</><dim>).toHaveBeenCalledWith(<green>expected</><dim>)

Expected spy to have been called with:
  <green>[\\"foo\\"]</>
But it was called with:
  <red>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toHaveBeenCalledWith works with jasmine.createSpy and more expected arguments 1`] = `
"<dim>expect(<red>spy</><dim>).toHaveBeenCalledWith(<green>expected</><dim>)

Expected spy to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was called with:
  <red>[\\"foo\\"]</>"
`;

exports[`toHaveBeenCalledWith works with jest.fn and Immutable.js objects 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toHaveBeenCalledWith(<green>expected</><dim>)

Expected mock function not to have been called with:
  <green>[Immutable.Map {foo: \\"bar\\"}, Immutable.Map {foo: \\"bar\\"}]</>"
`;

exports[`toHaveBeenCalledWith works with jest.fn and Immutable.js objects within regular objects 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toHaveBeenCalledWith(<green>expected</><dim>)

Expected mock function not to have been called with:
  <green>[{\\"a\\": Immutable.Map {foo: \\"bar\\"}}, {\\"b\\": Immutable.Map {foo: \\"bar\\"}}]</>"
`;

exports[`toHaveBeenCalledWith works with jest.fn and more actual arguments 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toHaveBeenCalledWith(<green>expected</><dim>)

Expected mock function to have been called with:
  <green>[\\"foo\\"]</>
But it was called with:
  <red>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toHaveBeenCalledWith works with jest.fn and more expected arguments 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toHaveBeenCalledWith(<green>expected</><dim>)

Expected mock function to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was called with:
  <red>[\\"foo\\"]</>"
`;

exports[`toHaveBeenCalledWithImmutable works with jasmine.createSpy and Immutable.js objects 1`] = `
"<dim>expect(<red>spy</><dim>).not.toHaveBeenCalledWithImmutable(<green>expected</><dim>)

Expected spy not to have been called with:
  <green>[Immutable.Map {foo: \\"bar\\"}, Immutable.Map {foo: \\"bar\\"}]</>"
`;

exports[`toHaveBeenCalledWithImmutable works with jasmine.createSpy and Immutable.js objects within regular objects 1`] = `
"<dim>expect(<red>spy</><dim>).not.toHaveBeenCalledWithImmutable(<green>expected</><dim>)

Expected spy not to have been called with:
  <green>[{\\"a\\": Immutable.Map {foo: \\"bar\\"}}, {\\"b\\": Immutable.Map {foo: \\"bar\\"}}]</>"
`;

exports[`toHaveBeenCalledWithImmutable works with jasmine.createSpy and more actual arguments 1`] = `
"<dim>expect(<red>spy</><dim>).toHaveBeenCalledWithImmutable(<green>expected</><dim>)

Expected spy to have been called with:
  <green>[\\"foo\\"]</>
But it was called with:
  <red>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toHaveBeenCalledWithImmutable works with jasmine.createSpy and more expected arguments 1`] = `
"<dim>expect(<red>spy</><dim>).toHaveBeenCalledWithImmutable(<green>expected</><dim>)

Expected spy to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was called with:
  <red>[\\"foo\\"]</>"
`;

exports[`toHaveBeenCalledWithImmutable works with jest.fn and Immutable.js objects 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toHaveBeenCalledWithImmutable(<green>expected</><dim>)

Expected mock function not to have been called with:
  <green>[Immutable.Map {foo: \\"bar\\"}, Immutable.Map {foo: \\"bar\\"}]</>"
`;

exports[`toHaveBeenCalledWithImmutable works with jest.fn and Immutable.js objects within regular objects 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toHaveBeenCalledWithImmutable(<green>expected</><dim>)

Expected mock function not to have been called with:
  <green>[{\\"a\\": Immutable.Map {foo: \\"bar\\"}}, {\\"b\\": Immutable.Map {foo: \\"bar\\"}}]</>"
`;

exports[`toHaveBeenCalledWithImmutable works with jest.fn and more actual arguments 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toHaveBeenCalledWithImmutable(<green>expected</><dim>)

Expected mock function to have been called with:
  <green>[\\"foo\\"]</>
But it was called with:
  <red>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toHaveBeenCalledWithImmutable works with jest.fn and more expected arguments 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toHaveBeenCalledWithImmutable(<green>expected</><dim>)

Expected mock function to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was called with:
  <red>[\\"foo\\"]</>"
`;
