// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lastCalledWith works only on spies or jest.fn 1`] = `
"<dim>expect(<red>jest.fn()</><dim>)[.not].lastCalledWith(<dim>)

<red>jest.fn()</> value must be a mock function or spy.
Received:
  function: <red>[Function fn]</>"
`;

exports[`lastCalledWith works with jest.fn and arguments that don't match 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).lastCalledWith(<green>expected</><dim>)

Expected mock function to have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was last called with:
  <red>[\\"foo\\", \\"bar1\\"]</>"
`;

exports[`lastCalledWith works with jest.fn and arguments that match 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.lastCalledWith(<green>expected</><dim>)

Expected mock function to not have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`lastCalledWith works with jest.fn and many arguments 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.lastCalledWith(<green>expected</><dim>)

Expected mock function to not have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`lastCalledWith works with jest.fn and many arguments that don't match 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).lastCalledWith(<green>expected</><dim>)

Expected mock function to have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was last called with:
  <red>[\\"foo\\", \\"bar3\\"]</>
and <red>two more calls</>."
`;

exports[`lastCalledWith works with jest.fn when not called 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).lastCalledWith(<green>expected</><dim>)

Expected mock function to have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was <red>not called</>."
`;

exports[`toBeCalled works only on spies or jest.fn 1`] = `
"<dim>expect(<red>jest.fn()</><dim>)[.not].toBeCalled(<dim>)

<red>jest.fn()</> value must be a mock function or spy.
Received:
  function: <red>[Function fn]</>"
`;

exports[`toBeCalled works with jasmine.createSpy 1`] = `
"<dim>expect(<red>spy</><dim>).toBeCalled(<dim>)

Expected spy to have been called."
`;

exports[`toBeCalled works with jasmine.createSpy 2`] = `
"<dim>expect(<red>spy</><dim>).not.toBeCalled(<dim>)

Expected spy not to be called but it was called with:
  <red>Array []</>"
`;

exports[`toBeCalled works with jasmine.createSpy 3`] = `
"<dim>expect(<red>received</><dim>)[.not].toBeCalled(<dim>)

Matcher does not accept any arguments.
Got:
  number: <green>555</>"
`;

exports[`toBeCalled works with jest.fn 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toBeCalled(<dim>)

Expected mock function to have been called."
`;

exports[`toBeCalled works with jest.fn 2`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toBeCalled(<dim>)

Expected mock function not to be called but it was called with:
  <red>Array []</>"
`;

exports[`toBeCalled works with jest.fn 3`] = `
"<dim>expect(<red>received</><dim>)[.not].toBeCalled(<dim>)

Matcher does not accept any arguments.
Got:
  number: <green>555</>"
`;

exports[`toBeCalledWith works only on spies or jest.fn 1`] = `
"<dim>expect(<red>jest.fn()</><dim>)[.not].toBeCalledWith(<dim>)

<red>jest.fn()</> value must be a mock function or spy.
Received:
  function: <red>[Function fn]</>"
`;

exports[`toBeCalledWith works with jest.fn and arguments that don't match 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toBeCalledWith(<green>expected</><dim>)

Expected mock function to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was called with:
  <red>[\\"foo\\", \\"bar1\\"]</>"
`;

exports[`toBeCalledWith works with jest.fn and arguments that match 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toBeCalledWith(<green>expected</><dim>)

Expected mock function not to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toBeCalledWith works with jest.fn and many arguments 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toBeCalledWith(<green>expected</><dim>)

Expected mock function not to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toBeCalledWith works with jest.fn and many arguments that don't match 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toBeCalledWith(<green>expected</><dim>)

Expected mock function to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was called with:
  <red>[\\"foo\\", \\"bar3\\"]</>, <red>[\\"foo\\", \\"bar2\\"]</>, <red>[\\"foo\\", \\"bar1\\"]</>"
`;

exports[`toBeCalledWith works with jest.fn when not called 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toBeCalledWith(<green>expected</><dim>)

Expected mock function to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was <red>not called</>."
`;

exports[`toHaveBeenCalled works only on spies or jest.fn 1`] = `
"<dim>expect(<red>jest.fn()</><dim>)[.not].toHaveBeenCalled(<dim>)

<red>jest.fn()</> value must be a mock function or spy.
Received:
  function: <red>[Function fn]</>"
`;

exports[`toHaveBeenCalled works with jasmine.createSpy 1`] = `
"<dim>expect(<red>spy</><dim>).toHaveBeenCalled(<dim>)

Expected spy to have been called."
`;

exports[`toHaveBeenCalled works with jasmine.createSpy 2`] = `
"<dim>expect(<red>spy</><dim>).not.toHaveBeenCalled(<dim>)

Expected spy not to be called but it was called with:
  <red>Array []</>"
`;

exports[`toHaveBeenCalled works with jasmine.createSpy 3`] = `
"<dim>expect(<red>received</><dim>)[.not].toHaveBeenCalled(<dim>)

Matcher does not accept any arguments.
Got:
  number: <green>555</>"
`;

exports[`toHaveBeenCalled works with jest.fn 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toHaveBeenCalled(<dim>)

Expected mock function to have been called."
`;

exports[`toHaveBeenCalled works with jest.fn 2`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toHaveBeenCalled(<dim>)

Expected mock function not to be called but it was called with:
  <red>Array []</>"
`;

exports[`toHaveBeenCalled works with jest.fn 3`] = `
"<dim>expect(<red>received</><dim>)[.not].toHaveBeenCalled(<dim>)

Matcher does not accept any arguments.
Got:
  number: <green>555</>"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 1`] = `
"<dim>expect(<red>received</><dim>)[.not].toHaveBeenCalledTimes(<green>expected</><dim>)

Expected value must be a number.
Got:
  object: <green>{}</>"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 2`] = `
"<dim>expect(<red>received</><dim>)[.not].toHaveBeenCalledTimes(<green>expected</><dim>)

Expected value must be a number.
Got:
  array: <green>Array []</>"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 3`] = `
"<dim>expect(<red>received</><dim>)[.not].toHaveBeenCalledTimes(<green>expected</><dim>)

Expected value must be a number.
Got:
  boolean: <green>true</>"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 4`] = `
"<dim>expect(<red>received</><dim>)[.not].toHaveBeenCalledTimes(<green>expected</><dim>)

Expected value must be a number.
Got:
  string: <green>\\"a\\"</>"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 5`] = `
"<dim>expect(<red>received</><dim>)[.not].toHaveBeenCalledTimes(<green>expected</><dim>)

Expected value must be a number.
Got:
  map: <green>Map {}</>"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 6`] = `
"<dim>expect(<red>received</><dim>)[.not].toHaveBeenCalledTimes(<green>expected</><dim>)

Expected value must be a number.
Got:
  function: <green>[Function anonymous]</>"
`;

exports[`toHaveBeenCalledTimes fails if function called less than expected times 1`] = `
"<dim>expect(<red>spy</><dim>).toHaveBeenCalledTimes(<green>2</><dim>)

Expected spy to have been called <green>two times</>, but it was called <red>one time</>."
`;

exports[`toHaveBeenCalledTimes fails if function called more than expected times 1`] = `
"<dim>expect(<red>spy</><dim>).toHaveBeenCalledTimes(<green>2</><dim>)

Expected spy to have been called <green>two times</>, but it was called <red>three times</>."
`;

exports[`toHaveBeenCalledTimes passes if function called equal to expected times 1`] = `
"<dim>expect(<red>spy</><dim>).not.toHaveBeenCalledTimes(<green>2</><dim>)

Expected spy not to be called <green>two times</>, but it was called exactly <red>two times</>."
`;

exports[`toHaveBeenCalledTimes verifies that actual is a Spy 1`] = `
"<dim>expect(<red>jest.fn()</><dim>)[.not].toHaveBeenCalledTimes(<dim>)

<red>jest.fn()</> value must be a mock function or spy.
Received:
  function: <red>[Function fn]</>"
`;

exports[`toHaveBeenCalledWith works only on spies or jest.fn 1`] = `
"<dim>expect(<red>jest.fn()</><dim>)[.not].toHaveBeenCalledWith(<dim>)

<red>jest.fn()</> value must be a mock function or spy.
Received:
  function: <red>[Function fn]</>"
`;

exports[`toHaveBeenCalledWith works with jasmine.createSpy and arguments that don't match 1`] = `
"<dim>expect(<red>spy</><dim>).toHaveBeenCalledWith(<green>expected</><dim>)

Expected spy to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was called with:
  <red>[\\"foo\\", \\"bar1\\"]</>"
`;

exports[`toHaveBeenCalledWith works with jasmine.createSpy and arguments that match 1`] = `
"<dim>expect(<red>spy</><dim>).not.toHaveBeenCalledWith(<green>expected</><dim>)

Expected spy not to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toHaveBeenCalledWith works with jasmine.createSpy and many arguments 1`] = `
"<dim>expect(<red>spy</><dim>).not.toHaveBeenCalledWith(<green>expected</><dim>)

Expected spy not to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toHaveBeenCalledWith works with jasmine.createSpy and many arguments that don't match 1`] = `
"<dim>expect(<red>spy</><dim>).toHaveBeenCalledWith(<green>expected</><dim>)

Expected spy to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was called with:
  <red>[\\"foo\\", \\"bar3\\"]</>, <red>[\\"foo\\", \\"bar2\\"]</>, <red>[\\"foo\\", \\"bar1\\"]</>"
`;

exports[`toHaveBeenCalledWith works with jasmine.createSpy when not called 1`] = `
"<dim>expect(<red>spy</><dim>).toHaveBeenCalledWith(<green>expected</><dim>)

Expected spy to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was <red>not called</>."
`;

exports[`toHaveBeenCalledWith works with jest.fn and arguments that don't match 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toHaveBeenCalledWith(<green>expected</><dim>)

Expected mock function to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was called with:
  <red>[\\"foo\\", \\"bar1\\"]</>"
`;

exports[`toHaveBeenCalledWith works with jest.fn and arguments that match 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toHaveBeenCalledWith(<green>expected</><dim>)

Expected mock function not to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toHaveBeenCalledWith works with jest.fn and many arguments 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toHaveBeenCalledWith(<green>expected</><dim>)

Expected mock function not to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toHaveBeenCalledWith works with jest.fn and many arguments that don't match 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toHaveBeenCalledWith(<green>expected</><dim>)

Expected mock function to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was called with:
  <red>[\\"foo\\", \\"bar3\\"]</>, <red>[\\"foo\\", \\"bar2\\"]</>, <red>[\\"foo\\", \\"bar1\\"]</>"
`;

exports[`toHaveBeenCalledWith works with jest.fn when not called 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toHaveBeenCalledWith(<green>expected</><dim>)

Expected mock function to have been called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was <red>not called</>."
`;

exports[`toHaveBeenLastCalledWith works only on spies or jest.fn 1`] = `
"<dim>expect(<red>jest.fn()</><dim>)[.not].toHaveBeenLastCalledWith(<dim>)

<red>jest.fn()</> value must be a mock function or spy.
Received:
  function: <red>[Function fn]</>"
`;

exports[`toHaveBeenLastCalledWith works with jasmine.createSpy and arguments that don't match 1`] = `
"<dim>expect(<red>spy</><dim>).toHaveBeenLastCalledWith(<green>expected</><dim>)

Expected spy to have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was last called with:
  <red>[\\"foo\\", \\"bar1\\"]</>"
`;

exports[`toHaveBeenLastCalledWith works with jasmine.createSpy and arguments that match 1`] = `
"<dim>expect(<red>spy</><dim>).not.toHaveBeenLastCalledWith(<green>expected</><dim>)

Expected spy to not have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toHaveBeenLastCalledWith works with jasmine.createSpy and many arguments 1`] = `
"<dim>expect(<red>spy</><dim>).not.toHaveBeenLastCalledWith(<green>expected</><dim>)

Expected spy to not have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toHaveBeenLastCalledWith works with jasmine.createSpy and many arguments that don't match 1`] = `
"<dim>expect(<red>spy</><dim>).toHaveBeenLastCalledWith(<green>expected</><dim>)

Expected spy to have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was last called with:
  <red>[\\"foo\\", \\"bar3\\"]</>
and <red>two more calls</>."
`;

exports[`toHaveBeenLastCalledWith works with jasmine.createSpy when not called 1`] = `
"<dim>expect(<red>spy</><dim>).toHaveBeenLastCalledWith(<green>expected</><dim>)

Expected spy to have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was <red>not called</>."
`;

exports[`toHaveBeenLastCalledWith works with jest.fn and arguments that don't match 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toHaveBeenLastCalledWith(<green>expected</><dim>)

Expected mock function to have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was last called with:
  <red>[\\"foo\\", \\"bar1\\"]</>"
`;

exports[`toHaveBeenLastCalledWith works with jest.fn and arguments that match 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toHaveBeenLastCalledWith(<green>expected</><dim>)

Expected mock function to not have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toHaveBeenLastCalledWith works with jest.fn and many arguments 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).not.toHaveBeenLastCalledWith(<green>expected</><dim>)

Expected mock function to not have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>"
`;

exports[`toHaveBeenLastCalledWith works with jest.fn and many arguments that don't match 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toHaveBeenLastCalledWith(<green>expected</><dim>)

Expected mock function to have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was last called with:
  <red>[\\"foo\\", \\"bar3\\"]</>
and <red>two more calls</>."
`;

exports[`toHaveBeenLastCalledWith works with jest.fn when not called 1`] = `
"<dim>expect(<red>jest.fn()</><dim>).toHaveBeenLastCalledWith(<green>expected</><dim>)

Expected mock function to have been last called with:
  <green>[\\"foo\\", \\"bar\\"]</>
But it was <red>not called</>."
`;
